一个框，生产者往里扔馒头，消费者从里面拿出来

package noname;

public class ProducerConsumer {
	public static void main (String[] args){
		SyncStack ss = new SyncStack();
		Producer p = new Producer(ss);
		Consumer c = new Consumer(ss);
		new Thread(p).start();
		new Thread(c).start();
	}
}

class  WoTou {
	int id;
	WoTou(int id) {
		this.id = id;
	}
	public String toString() {
		return "WoTou :"+id;
	}
}

class SyncStack {
	int index = 0;
	WoTou[] arrWT = new WoTou[6];
			
	public synchronized void push(WoTou wt) {
		while(index == arrWT.length) {
			try {
				this.wait();//当前访问的线程的wait(必须是锁住的）,wait时锁不再为它所有
			} catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
		this.notify();//叫醒wait的线程使它继续执行
		arrWT[index] = wt;
		index ++;
	}
	
	public synchronized WoTou pop() {
		while(index == 0) {
			try {
				this.wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		this.notify();
		index --;
		return arrWT[index];
	}		 
}

class Producer implements Runnable{
	SyncStack ss = null;
	Producer(SyncStack ss){
		this.ss = ss;
	}
	
	public void run() {
		for(int i = 0;i <20;i++) {
			WoTou wt = new WoTou(i);
			ss.push(wt);
System.out.println("生产了：" +wt);
		}
	}
}

class Consumer implements Runnable{
	SyncStack ss = null;
	Consumer(SyncStack ss){
		this.ss = ss;
	}
	
	public void run() {
		for(int i = 0;i <20;i++) {
			WoTou wt = ss.pop();
System.out.println("消费了：" +wt);
			System.out.println(wt);
		}
	}
}

